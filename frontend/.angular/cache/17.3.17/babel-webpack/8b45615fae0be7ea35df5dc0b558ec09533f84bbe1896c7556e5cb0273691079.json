{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/auth`;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token && user) {\n        this.currentUserSubject.next(JSON.parse(user));\n      }\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        this.currentUserSubject.next(response.user);\n      }));\n    }\n    register(userData) {\n      return this.http.post(`${this.apiUrl}/register`, userData);\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}