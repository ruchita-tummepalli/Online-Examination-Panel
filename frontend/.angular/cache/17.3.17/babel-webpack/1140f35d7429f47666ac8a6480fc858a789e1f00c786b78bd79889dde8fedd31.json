{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/exam.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nfunction ExamFormComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ExamFormComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Title must be at least 3 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ExamFormComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Date is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ExamFormComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Time is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ExamFormComponent_mat_error_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Duration is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ExamFormComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Duration must be at least 1 minute\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ExamFormComponent = /*#__PURE__*/(() => {\n  class ExamFormComponent {\n    constructor(fb, examService, snackBar, dialogRef, data) {\n      this.fb = fb;\n      this.examService = examService;\n      this.snackBar = snackBar;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.isEdit = false;\n      this.isEdit = !!data;\n      this.examForm = this.fb.group({\n        title: [data?.title || '', [Validators.required, Validators.minLength(3)]],\n        description: [data?.description || ''],\n        date: [data?.date || '', Validators.required],\n        time: [data?.time || '', Validators.required],\n        duration: [data?.duration || '', [Validators.required, Validators.min(1)]]\n      });\n    }\n    ngOnInit() {}\n    onSubmit() {\n      if (this.examForm.valid) {\n        const examData = this.examForm.value;\n        if (this.isEdit) {\n          this.examService.updateExam(this.data.id, examData).subscribe({\n            next: () => {\n              this.snackBar.open('Exam updated successfully', 'Close', {\n                duration: 3000\n              });\n              this.dialogRef.close(true);\n            },\n            error: error => {\n              this.snackBar.open('Error updating exam', 'Close', {\n                duration: 3000\n              });\n            }\n          });\n        } else {\n          this.examService.createExam(examData).subscribe({\n            next: () => {\n              this.snackBar.open('Exam created successfully', 'Close', {\n                duration: 3000\n              });\n              this.dialogRef.close(true);\n            },\n            error: error => {\n              this.snackBar.open('Error creating exam', 'Close', {\n                duration: 3000\n              });\n            }\n          });\n        }\n      }\n    }\n    onCancel() {\n      this.dialogRef.close();\n    }\n    static {\n      this.ɵfac = function ExamFormComponent_Factory(t) {\n        return new (t || ExamFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ExamService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ExamFormComponent,\n        selectors: [[\"app-exam-form\"]],\n        decls: 35,\n        vars: 10,\n        consts: [[\"mat-dialog-title\", \"\"], [3, \"formGroup\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"matInput\", \"\", \"formControlName\", \"title\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"rows\", \"3\"], [\"matInput\", \"\", \"type\", \"date\", \"formControlName\", \"date\"], [\"matInput\", \"\", \"type\", \"time\", \"formControlName\", \"time\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"duration\"], [\"align\", \"end\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", \"disabled\"]],\n        template: function ExamFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\", 0);\n            i0.ɵɵtext(1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"form\", 1)(4, \"mat-form-field\", 2)(5, \"mat-label\");\n            i0.ɵɵtext(6, \"Title\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 3);\n            i0.ɵɵtemplate(8, ExamFormComponent_mat_error_8_Template, 2, 0, \"mat-error\", 4)(9, ExamFormComponent_mat_error_9_Template, 2, 0, \"mat-error\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"mat-form-field\", 2)(11, \"mat-label\");\n            i0.ɵɵtext(12, \"Description\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(13, \"textarea\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"mat-form-field\", 2)(15, \"mat-label\");\n            i0.ɵɵtext(16, \"Date\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(17, \"input\", 6);\n            i0.ɵɵtemplate(18, ExamFormComponent_mat_error_18_Template, 2, 0, \"mat-error\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"mat-form-field\", 2)(20, \"mat-label\");\n            i0.ɵɵtext(21, \"Time\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(22, \"input\", 7);\n            i0.ɵɵtemplate(23, ExamFormComponent_mat_error_23_Template, 2, 0, \"mat-error\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"mat-form-field\", 2)(25, \"mat-label\");\n            i0.ɵɵtext(26, \"Duration (minutes)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(27, \"input\", 8);\n            i0.ɵɵtemplate(28, ExamFormComponent_mat_error_28_Template, 2, 0, \"mat-error\", 4)(29, ExamFormComponent_mat_error_29_Template, 2, 0, \"mat-error\", 4);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(30, \"mat-dialog-actions\", 9)(31, \"button\", 10);\n            i0.ɵɵlistener(\"click\", function ExamFormComponent_Template_button_click_31_listener() {\n              return ctx.onCancel();\n            });\n            i0.ɵɵtext(32, \"Cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(33, \"button\", 11);\n            i0.ɵɵlistener(\"click\", function ExamFormComponent_Template_button_click_33_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵtext(34);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            let tmp_2_0;\n            let tmp_3_0;\n            let tmp_4_0;\n            let tmp_5_0;\n            let tmp_6_0;\n            let tmp_7_0;\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate(ctx.isEdit ? \"Edit Exam\" : \"Add Exam\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.examForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.examForm.get(\"title\")) == null ? null : tmp_2_0.hasError(\"required\"));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.examForm.get(\"title\")) == null ? null : tmp_3_0.hasError(\"minlength\"));\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.examForm.get(\"date\")) == null ? null : tmp_4_0.hasError(\"required\"));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (tmp_5_0 = ctx.examForm.get(\"time\")) == null ? null : tmp_5_0.hasError(\"required\"));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (tmp_6_0 = ctx.examForm.get(\"duration\")) == null ? null : tmp_6_0.hasError(\"required\"));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_7_0 = ctx.examForm.get(\"duration\")) == null ? null : tmp_7_0.hasError(\"min\"));\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", !ctx.examForm.valid);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isEdit ? \"Update\" : \"Create\", \" \");\n          }\n        },\n        dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatButton, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput, i4.MatDialogTitle, i4.MatDialogActions, i4.MatDialogContent],\n        styles: [\".full-width[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}\"]\n      });\n    }\n  }\n  return ExamFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}